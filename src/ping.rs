#![allow(warnings)]
use futures::StreamExt;
use libp2p::{ping, swarm::SwarmEvent, Multiaddr};
use std::{error::Error, time::Duration};
use tracing_subscriber::EnvFilter;

#[async_std::main]
async fn main() -> Result<(), Box<dyn Error>> {
    tracing_subscriber::fmt()
        .with_env_filter(EnvFilter::from_default_env())
        .init();

    //Swarm represents the P2P networking stack
    let mut swarm = libp2p::SwarmBuilder::with_new_identity() //Creates a new cryptographic identity (public/private key pair) for identifying and authenticating nodes in the P2P network.
        .with_async_std()
        .with_tcp(
            //Transport Configuration
            libp2p::tcp::Config::new(),
            libp2p::tls::Config::new,
            libp2p::yamux::Config::default, //Sets up the multiplexer (Yamux), which allows multiple streams over a single TCP connection.
        )?
        .with_behaviour(|_| ping::Behaviour::default())? //ping: allowing nodes to measure round-trip time and maintain connectivity
        .with_swarm_config(|cfg| cfg.with_idle_connection_timeout(Duration::from_secs(u64::MAX))) //keep connections open indefinitely (u64::MAX) when idle
        .build();

    // Tell the swarm to listen on all interfaces and a random, OS-assigned port.
    swarm.listen_on("/ip4/0.0.0.0/tcp/0".parse()?)?;

    //Dial the peer identified by the multi-address given as the second command-line argument, if any.
    if let Some(addr) = std::env::args().nth(1) {
        let remote: Multiaddr = addr.parse()?;
        swarm.dial(remote)?; //Initiates an outbound connection to the remote peer at the specified Multiaddr.
        println!("Dialed {addr}")
    }

    // continuously processes events generated by the swarm
    loop {
        match swarm.select_next_some().await {
            //Triggered when the swarm starts listening on a new address.
            SwarmEvent::NewListenAddr { address, .. } => println!("Listening on {address:?}"),

            //Handles events specific to the ping protocol (e.g., receiving a ping response or timeout)
            SwarmEvent::Behaviour(event) => println!("{event:?}"),
            connection_events => println!("{connection_events:?}"),
        }
    }

    Ok(())
}

//How to run: Running two nodes
//1- cargo run --bin ping
//output: Listening on "/ip4/127.0.0.1/tcp/24915"
//2- cargo run --bin ping -- /ip4/127.0.0.1/tcp/24915
